install.packages(c("dplyr", "ggplot2", "interplot", "margins"))
knitr::opts_chunk$set(echo = TRUE)
?grep
package <- "http://www.difjdss.com"
grep(pattern = "http://", x = package)
package <- "https://www.difjdss.com"
grep(pattern = "http://", x = package)
grep(pattern = "http://", x = package) %>% length
library(dplyr)
library(dplyr)
grep(pattern = "http://", x = package) %>% length
grep(pattern = "https://", x = package) %>% length
?match
"https://" %in% package
grep(pattern = "https://", x = package)
ifelse(length(grep(pattern = "http://", x = package)) +
length(grep(pattern = "https://", x = package) > 0,
TRUE,
FALSE)
ifelse(length(grep(pattern = "http://", x = package)) +
length(grep(pattern = "https://", x = package)) > 0,
TRUE,
FALSE)
length(grep(pattern = "https://", x = package))
length(grep(pattern = "http://", x = package))
?available.packages()
available.packages()
available.packages()[,1]
available.packages() %>% str
a <- available.packages()
View(a)
paste0("http://cran.r-project.org/src/contrib/Archive/",
package,"/",package,"_",version,".tar.gz")
package <- "ggplot2",
paste0("http://cran.r-project.org/src/contrib/Archive/",
package,"/",package,"_",version,".tar.gz")
package <- "ggplot2"
version <- "2.030"
paste0("http://cran.r-project.org/src/contrib/Archive/",
package,"/",package,"_",version,".tar.gz")
installed.packages()[ ,1]
installed.packages()[ ,2]
installed.packages()[ ,3]
installed.packages()["MASS",3]
a <- "rere_erere_erere_erere_re"
gsub('(.*)_\\w+', '\\1', a)
sub("_[^_]+$", "", a)
x <- "https://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_0.4.5.tar.gz""
x <- "https://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_0.4.5.tar.gz"
sub('.*\\.', '', x)
sub('.*\\.', '', x)
x <- "https://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_0.4.5.tar.gz"
sub('.*\\.', '', x)
x <- "https://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_0.4.5.tar.gz"
sub('.*\\/', '', x)
package <- "https://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_0.4.5.tar.gz"
sub('.*\\/', '', package)
sub('.tar*', '', x)
sub('.tar.*', '', x)
sub('.*\\/.tar.*', '', package)
w <- sub('.*\\/', '', package)
package <- "https://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_0.4.5.tar.gz"
w <- sub('.*\\/', '', package)
w
sub('.tar.*', '', w)
sub('.*\\_', '', c)
# Extract the package name from the URL
a <- "https://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_0.4.5.tar.gz"
b <- sub('.*\\/', '', a)
c <- sub('.tar.*', '', b)
sub('.*\\_', '', c)
sub('\\._*', '', c)
c
sub('\\_*', '', c)
a <- "https://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_0.4.5.tar.gz"
b <- sub('.*\\/', '', a)
c <- sub('.tar.*', '', b)
c
sub('.*\\_', '', c)
bar <- sub('\\_.*', '', c)
sub('\\_.*', '', c)
a <- "https://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_0.4.5.tar.gz"
strsplit(basename(a), "_")
a <- "https://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_0.4.5.tar.gz"
strsplit(basename(a), "_")
sub(".tar.*", "", strsplit(basename(a), "_")[[1]])
sub(".tar.*", "", strsplit(basename(a), "_")[[1]])
sub(".tar.*", "", strsplit(basename(a), "_")[[1]])[1]
sub(".tar.*", "", strsplit(basename(a), "_")[[1]])[2]
sub(".tar.*", "", strsplit(basename(package), "_")[[1]])[1]
sub(".tar.*", "", strsplit(basename(package), "_")[[1]])[2]
# Function is named pkg_function. Takes one function
# as an input
pkg_function <- function(package, version = NA){
# Check if package contains a URL:
url_test <- ifelse(length(grep("http://", package)) +
length(grep("https://", package)) > 0,
TRUE,
FALSE)
# If package name provided but no version, install
# package if not installed.
if(url_test == FALSE & is.na(version) == TRUE){
if(!package %in% installed.packages()[ ,1]){
install.packages(package, repos = 'http://cran.rstudio.com/')
}
# Load package
library(package)
}
# If a package name is provided and a version number is
# provided, check if the version is the most recent on CRAN.
# If so, install as usual if not already installed.
# Otherwise,install regardless of whether it is installed
# (as a different version).
if(url_test == FALSE & is.na(version) == FALSE){
# Create a URL for downloading/installing the package from CRAN
package_url <- paste0("http://cran.r-project.org/src/contrib/Archive/",
package,"/",package,"_",version,".tar.gz")
# If the package isn't installed, install the specified version:
if(!package %in% installed.packages()[ ,1]){
install.packages(package_url, repos = NULL, type = "source")
}
# Check if the package is installed. If it is installed, check
# if the installed version is the same as the specified version.
# If so, do nothing. Otherwise, try to install the specified
# version from CRAN.
if(package %in% installed.packages()[ ,1]){
if(version != installed.packages()[package,3]){
install.packages(package_url, repos = NULL, type = "source")
}
}
# Load package
library(package)
}
# If URL is provided, check if the specified
# package and version is already installed. If so,
# do nothing. Otherwise, install it.
if(url_test == TRUE & is.na(version) == TRUE){
# Extract the package name and version from the URL
pkg_name <- sub(".tar.*", "", strsplit(basename(package), "_")[[1]])[1]
pkg_version <- sub(".tar.*", "", strsplit(basename(package), "_")[[1]])[2]
# If the package isn't installed, install the specified version:
if(!pkg_name %in% installed.packages()[ ,1]){
install.packages(package_url, repos = NULL, type = "source")
library(pkg_name)
}
# If the package is installed, check if the version matches
# the currently loaded version. Install if not installed.
if(package %in% installed.packages()[ ,1]){
if(pkg_version != installed.packages()[package,3]){
install.packages(package_url, repos = NULL, type = "source")
library(pkg_name)
}
}
}
}
# Wrap a for-loop around pkg_function to apply the function to
# each element of a vector of package names and versions.
loadpkg <- function(packages, versions = rep(NA,length(packages))){
# Function is named pkg_function. Takes one function
# as an input
pkg_function <- function(package, version = NA){
# Check if package contains a URL:
url_test <- ifelse(length(grep("http://", package)) +
length(grep("https://", package)) > 0,
TRUE,
FALSE)
# If package name provided but no version, install
# package if not installed. Load it.
if(url_test == FALSE & is.na(version) == TRUE){
if(!package %in% installed.packages()[ ,1]){
install.packages(package, repos = 'http://cran.rstudio.com/')
library(package)
}
}
# If a package name is provided and a version number is
# provided, check if the version is the most recent on CRAN.
# If so, install as usual if not already installed.
# Otherwise,install regardless of whether it is installed
# (as a different version).
if(url_test == FALSE & is.na(version) == FALSE){
# Create a URL for downloading/installing the package from CRAN
package_url <- paste0("http://cran.r-project.org/src/contrib/Archive/",
package,"/",package,"_",version,".tar.gz")
# If the package isn't installed, install the specified version
# and load it.
if(!package %in% installed.packages()[ ,1]){
install.packages(package_url, repos = NULL, type = "source")
library(package)
}
# Check if the package is installed. If it is installed, check
# if the installed version is the same as the specified version.
# If so, do nothing. Otherwise, try to install the specified
# version from CRAN. Load it.
if(package %in% installed.packages()[ ,1]){
if(version != installed.packages()[package,3]){
install.packages(package_url, repos = NULL, type = "source")
library(package)
}
}
}
# If URL is provided, check if the specified
# package and version is already installed. If so,
# do nothing. Otherwise, install it.
if(url_test == TRUE & is.na(version) == TRUE){
# Give a warning Rtools must be installed for windows
warning("You have provided a URL to the package source code.
If you are using Windows, make sure Rtools is installed
to compile the code!")
# Extract the package name and version from the URL
pkg_name <- sub(".tar.*", "", strsplit(basename(package), "_")[[1]])[1]
pkg_version <- sub(".tar.*", "", strsplit(basename(package), "_")[[1]])[2]
# If the package isn't installed, install the specified version
# and load it.
if(!pkg_name %in% installed.packages()[ ,1]){
install.packages(package_url, repos = NULL, type = "source")
library(pkg_name)
}
# If the package is installed, check if the version matches
# the currently loaded version. Install if not installed.
if(package %in% installed.packages()[ ,1]){
if(pkg_version != installed.packages()[package,3]){
install.packages(package_url, repos = NULL, type = "source")
library(pkg_name)
}
}
}
}
# Iterate through the vector of package names/urls
for(i in 1:length(packages)){
pkg_function(package = packages[i], version = version[i])
}
}
# Wrap a for-loop around pkg_function to apply the function to
# each element of a vector of package names and versions.
loadpkg <- function(packages, versions = rep(NA,length(packages))){
# Function is named pkg_function. Takes one function
# as an input
pkg_function <- function(package, version = NA){
# Check if package contains a URL:
url_test <- ifelse(length(grep("http://", package)) +
length(grep("https://", package)) > 0,
TRUE,
FALSE)
# If package name provided but no version, install
# package if not installed. Load it.
if(url_test == FALSE & is.na(version) == TRUE){
if(!package %in% installed.packages()[ ,1]){
install.packages(package, repos = 'http://cran.rstudio.com/')
library(package)
}
}
# If a package name is provided and a version number is
# provided, check if the version is the most recent on CRAN.
# If so, install as usual if not already installed.
# Otherwise,install regardless of whether it is installed
# (as a different version).
if(url_test == FALSE & is.na(version) == FALSE){
# Create a URL for downloading/installing the package from CRAN
package_url <- paste0("http://cran.r-project.org/src/contrib/Archive/",
package,"/",package,"_",version,".tar.gz")
# If the package isn't installed, install the specified version
# and load it.
if(!package %in% installed.packages()[ ,1]){
install.packages(package_url, repos = NULL, type = "source")
library(package)
}
# Check if the package is installed. If it is installed, check
# if the installed version is the same as the specified version.
# If so, do nothing. Otherwise, try to install the specified
# version from CRAN. Load it.
if(package %in% installed.packages()[ ,1]){
if(version != installed.packages()[package,3]){
install.packages(package_url, repos = NULL, type = "source")
library(package)
}
}
}
# If URL is provided, check if the specified
# package and version is already installed. If so,
# do nothing. Otherwise, install it.
if(url_test == TRUE & is.na(version) == TRUE){
# Give a warning Rtools must be installed for windows
warning("You have provided a URL to the package source code.
If you are using Windows, make sure Rtools is installed
to compile the code!")
# Extract the package name and version from the URL
pkg_name <- sub(".tar.*", "", strsplit(basename(package), "_")[[1]])[1]
pkg_version <- sub(".tar.*", "", strsplit(basename(package), "_")[[1]])[2]
# If the package isn't installed, install the specified version
# and load it.
if(!pkg_name %in% installed.packages()[ ,1]){
install.packages(package_url, repos = NULL, type = "source")
library(pkg_name)
}
# If the package is installed, check if the version matches
# the currently loaded version. Install if not installed.
if(package %in% installed.packages()[ ,1]){
if(pkg_version != installed.packages()[package,3]){
install.packages(package_url, repos = NULL, type = "source")
library(pkg_name)
}
}
}
}
# Iterate through the vector of package names/urls
for(i in 1:length(packages)){
pkg_function(package = packages[i], version = version[i])
}
}
loadpkg(package = "https://cran.r-project.org/src/contrib/Archive/ggplot2/ggplot2_0.9.3.tar.gz",
version = "2.0")
?interplot
View(loadpkg)
rm(list=ls())
install.packages(c("backports", "BH", "broom", "checkmate", "cli", "coda", "colorspace", "cowplot", "curl", "data.table", "devtools", "digest", "dplyr", "evaluate", "fansi", "ggplot2", "ggridges", "git2r", "haven", "htmlTable", "htmlwidgets", "httr", "interactionTest", "jsonlite", "knitr", "lme4", "markdown", "mime", "nloptr", "openssl", "pillar", "pkgconfig", "prediction", "psych", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "rlang", "rmarkdown", "rstudioapi", "sjlabelled", "snakecase", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "vegan", "visNetwork", "xfun", "XML", "xtable"))
install.packages(c("assertthat", "callr", "caTools", "cli", "colorspace", "dplyr", "evaluate", "forcats", "fs", "git2r", "glue", "haven", "highr", "Hmisc", "igraph", "knitr", "lazyeval", "lme4", "lmerTest", "mirt", "openssl", "permute", "pkgbuild", "prediction", "processx", "purrr", "R6", "Rcpp", "RcppArmadillo", "rlang", "rmarkdown", "rstudioapi", "sjlabelled", "stringi", "stringr", "tibble", "tidyr", "tinytex", "vegan", "xfun", "XML"))
combn(x = c("dog","cat","meow"), m = 2)
combn(x = c("waPo","WaTi","None"), m = 2)
?combn
combn(x = c("waPo","WaTi","None"), m = 2, simplify = T)
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
knitr::opts_chunk$set(echo = TRUE)
install.packages("blogdown")
blogdown::install_hugo()
blogdown::update_hugo()
install.packages("blogdown")
blogdown::hugo_version()
library(blogdown)
install.packages("blogdown")
blogdown::install_hugo(force = TRUE)
install.packages("blogdown")
Sys.which("pdflatex")
Sys.which("pdflatex")
file.exists(Sys.which('texi2dvi'))
.rs.is_tex_installed()
.rs.is_tex_installed()
.rs.is_tex_installed()
rs.istexinstalled()
Sys.which('pdflatex')
Sys.which('xelatex')
Sys.getenv("R_ENVIRON")
`Sys.getenv("R_HOME")
Sys.getenv("R_HOME")
Sys.getenv("R_HOME")
install.packages("installr")
library(installr)
installr::check.for.updates.R()
installr::updateR()
blogdown:::serve_site()
setwd("C:/Users/brett/Dropbox/professional/website/brettgall.hugo")
blogdown:::serve_site()
blogdown:::serve_site()
